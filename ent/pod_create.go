// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pilegoblin/garbanzo/ent/bean"
	"github.com/pilegoblin/garbanzo/ent/pod"
	"github.com/pilegoblin/garbanzo/ent/user"
)

// PodCreate is the builder for creating a Pod entity.
type PodCreate struct {
	config
	mutation *PodMutation
	hooks    []Hook
}

// SetPodName sets the "pod_name" field.
func (pc *PodCreate) SetPodName(s string) *PodCreate {
	pc.mutation.SetPodName(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PodCreate) SetCreatedAt(t time.Time) *PodCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PodCreate) SetNillableCreatedAt(t *time.Time) *PodCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetInviteCode sets the "invite_code" field.
func (pc *PodCreate) SetInviteCode(s string) *PodCreate {
	pc.mutation.SetInviteCode(s)
	return pc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pc *PodCreate) SetOwnerID(id int) *PodCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pc *PodCreate) SetNillableOwnerID(id *int) *PodCreate {
	if id != nil {
		pc = pc.SetOwnerID(*id)
	}
	return pc
}

// SetOwner sets the "owner" edge to the User entity.
func (pc *PodCreate) SetOwner(u *User) *PodCreate {
	return pc.SetOwnerID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pc *PodCreate) AddUserIDs(ids ...int) *PodCreate {
	pc.mutation.AddUserIDs(ids...)
	return pc
}

// AddUsers adds the "users" edges to the User entity.
func (pc *PodCreate) AddUsers(u ...*User) *PodCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddUserIDs(ids...)
}

// AddBeanIDs adds the "beans" edge to the Bean entity by IDs.
func (pc *PodCreate) AddBeanIDs(ids ...int) *PodCreate {
	pc.mutation.AddBeanIDs(ids...)
	return pc
}

// AddBeans adds the "beans" edges to the Bean entity.
func (pc *PodCreate) AddBeans(b ...*Bean) *PodCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBeanIDs(ids...)
}

// Mutation returns the PodMutation object of the builder.
func (pc *PodCreate) Mutation() *PodMutation {
	return pc.mutation
}

// Save creates the Pod in the database.
func (pc *PodCreate) Save(ctx context.Context) (*Pod, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PodCreate) SaveX(ctx context.Context) *Pod {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PodCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PodCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PodCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pod.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PodCreate) check() error {
	if _, ok := pc.mutation.PodName(); !ok {
		return &ValidationError{Name: "pod_name", err: errors.New(`ent: missing required field "Pod.pod_name"`)}
	}
	if v, ok := pc.mutation.PodName(); ok {
		if err := pod.PodNameValidator(v); err != nil {
			return &ValidationError{Name: "pod_name", err: fmt.Errorf(`ent: validator failed for field "Pod.pod_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pod.created_at"`)}
	}
	if _, ok := pc.mutation.InviteCode(); !ok {
		return &ValidationError{Name: "invite_code", err: errors.New(`ent: missing required field "Pod.invite_code"`)}
	}
	return nil
}

func (pc *PodCreate) sqlSave(ctx context.Context) (*Pod, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PodCreate) createSpec() (*Pod, *sqlgraph.CreateSpec) {
	var (
		_node = &Pod{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pod.Table, sqlgraph.NewFieldSpec(pod.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.PodName(); ok {
		_spec.SetField(pod.FieldPodName, field.TypeString, value)
		_node.PodName = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.InviteCode(); ok {
		_spec.SetField(pod.FieldInviteCode, field.TypeString, value)
		_node.InviteCode = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pod.OwnerTable,
			Columns: []string{pod.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_owned_pods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.UsersTable,
			Columns: pod.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BeansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pod.BeansTable,
			Columns: []string{pod.BeansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bean.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PodCreateBulk is the builder for creating many Pod entities in bulk.
type PodCreateBulk struct {
	config
	err      error
	builders []*PodCreate
}

// Save creates the Pod entities in the database.
func (pcb *PodCreateBulk) Save(ctx context.Context) ([]*Pod, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pod, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PodCreateBulk) SaveX(ctx context.Context) []*Pod {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PodCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PodCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
