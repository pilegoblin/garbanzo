// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BeansColumns holds the columns for the "beans" table.
	BeansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// BeansTable holds the schema information for the "beans" table.
	BeansTable = &schema.Table{
		Name:       "beans",
		Columns:    BeansColumns,
		PrimaryKey: []*schema.Column{BeansColumns[0]},
	}
	// PodsColumns holds the columns for the "pods" table.
	PodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "pod_name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_owned_pods", Type: field.TypeInt, Nullable: true},
	}
	// PodsTable holds the schema information for the "pods" table.
	PodsTable = &schema.Table{
		Name:       "pods",
		Columns:    PodsColumns,
		PrimaryKey: []*schema.Column{PodsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pods_users_owned_pods",
				Columns:    []*schema.Column{PodsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "bean_posts", Type: field.TypeInt, Nullable: true},
		{Name: "user_posts", Type: field.TypeInt, Nullable: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_beans_posts",
				Columns:    []*schema.Column{PostsColumns[3]},
				RefColumns: []*schema.Column{BeansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "auth_id", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// PodUsersColumns holds the columns for the "pod_users" table.
	PodUsersColumns = []*schema.Column{
		{Name: "pod_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// PodUsersTable holds the schema information for the "pod_users" table.
	PodUsersTable = &schema.Table{
		Name:       "pod_users",
		Columns:    PodUsersColumns,
		PrimaryKey: []*schema.Column{PodUsersColumns[0], PodUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pod_users_pod_id",
				Columns:    []*schema.Column{PodUsersColumns[0]},
				RefColumns: []*schema.Column{PodsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "pod_users_user_id",
				Columns:    []*schema.Column{PodUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BeansTable,
		PodsTable,
		PostsTable,
		UsersTable,
		PodUsersTable,
	}
)

func init() {
	PodsTable.ForeignKeys[0].RefTable = UsersTable
	PostsTable.ForeignKeys[0].RefTable = BeansTable
	PostsTable.ForeignKeys[1].RefTable = UsersTable
	PodUsersTable.ForeignKeys[0].RefTable = PodsTable
	PodUsersTable.ForeignKeys[1].RefTable = UsersTable
}
