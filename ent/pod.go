// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pilegoblin/garbanzo/ent/pod"
	"github.com/pilegoblin/garbanzo/ent/user"
)

// Pod is the model entity for the Pod schema.
type Pod struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PodName holds the value of the "pod_name" field.
	PodName string `json:"pod_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PodQuery when eager-loading is set.
	Edges           PodEdges `json:"edges"`
	user_owned_pods *int
	selectValues    sql.SelectValues
}

// PodEdges holds the relations/edges for other nodes in the graph.
type PodEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PodEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e PodEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pod.FieldID:
			values[i] = new(sql.NullInt64)
		case pod.FieldPodName:
			values[i] = new(sql.NullString)
		case pod.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case pod.ForeignKeys[0]: // user_owned_pods
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pod fields.
func (po *Pod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case pod.FieldPodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pod_name", values[i])
			} else if value.Valid {
				po.PodName = value.String
			}
		case pod.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case pod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_owned_pods", value)
			} else if value.Valid {
				po.user_owned_pods = new(int)
				*po.user_owned_pods = int(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pod.
// This includes values selected through modifiers, order, etc.
func (po *Pod) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Pod entity.
func (po *Pod) QueryOwner() *UserQuery {
	return NewPodClient(po.config).QueryOwner(po)
}

// QueryUsers queries the "users" edge of the Pod entity.
func (po *Pod) QueryUsers() *UserQuery {
	return NewPodClient(po.config).QueryUsers(po)
}

// Update returns a builder for updating this Pod.
// Note that you need to call Pod.Unwrap() before calling this method if this Pod
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Pod) Update() *PodUpdateOne {
	return NewPodClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Pod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Pod) Unwrap() *Pod {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pod is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Pod) String() string {
	var builder strings.Builder
	builder.WriteString("Pod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("pod_name=")
	builder.WriteString(po.PodName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pods is a parsable slice of Pod.
type Pods []*Pod
