// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeOwnedPods holds the string denoting the owned_pods edge name in mutations.
	EdgeOwnedPods = "owned_pods"
	// EdgeJoinedPods holds the string denoting the joined_pods edge name in mutations.
	EdgeJoinedPods = "joined_pods"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "user_posts"
	// OwnedPodsTable is the table that holds the owned_pods relation/edge.
	OwnedPodsTable = "pods"
	// OwnedPodsInverseTable is the table name for the Pod entity.
	// It exists in this package in order to avoid circular dependency with the "pod" package.
	OwnedPodsInverseTable = "pods"
	// OwnedPodsColumn is the table column denoting the owned_pods relation/edge.
	OwnedPodsColumn = "user_owned_pods"
	// JoinedPodsTable is the table that holds the joined_pods relation/edge. The primary key declared below.
	JoinedPodsTable = "pod_users"
	// JoinedPodsInverseTable is the table name for the Pod entity.
	// It exists in this package in order to avoid circular dependency with the "pod" package.
	JoinedPodsInverseTable = "pods"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldUsername,
	FieldPicture,
	FieldCreatedAt,
}

var (
	// JoinedPodsPrimaryKey and JoinedPodsColumn2 are the table columns denoting the
	// primary key for the joined_pods relation (M2M).
	JoinedPodsPrimaryKey = []string{"pod_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PictureValidator is a validator for the "picture" field. It is called by the builders before save.
	PictureValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPostsCount orders the results by posts count.
func ByPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostsStep(), opts...)
	}
}

// ByPosts orders the results by posts terms.
func ByPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedPodsCount orders the results by owned_pods count.
func ByOwnedPodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedPodsStep(), opts...)
	}
}

// ByOwnedPods orders the results by owned_pods terms.
func ByOwnedPods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedPodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJoinedPodsCount orders the results by joined_pods count.
func ByJoinedPodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJoinedPodsStep(), opts...)
	}
}

// ByJoinedPods orders the results by joined_pods terms.
func ByJoinedPods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJoinedPodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
	)
}
func newOwnedPodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedPodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnedPodsTable, OwnedPodsColumn),
	)
}
func newJoinedPodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JoinedPodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, JoinedPodsTable, JoinedPodsPrimaryKey...),
	)
}
