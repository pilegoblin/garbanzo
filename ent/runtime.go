// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/pilegoblin/garbanzo/ent/bean"
	"github.com/pilegoblin/garbanzo/ent/pod"
	"github.com/pilegoblin/garbanzo/ent/post"
	"github.com/pilegoblin/garbanzo/ent/schema"
	"github.com/pilegoblin/garbanzo/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	beanFields := schema.Bean{}.Fields()
	_ = beanFields
	// beanDescName is the schema descriptor for name field.
	beanDescName := beanFields[0].Descriptor()
	// bean.NameValidator is a validator for the "name" field. It is called by the builders before save.
	bean.NameValidator = beanDescName.Validators[0].(func(string) error)
	podFields := schema.Pod{}.Fields()
	_ = podFields
	// podDescPodName is the schema descriptor for pod_name field.
	podDescPodName := podFields[0].Descriptor()
	// pod.PodNameValidator is a validator for the "pod_name" field. It is called by the builders before save.
	pod.PodNameValidator = podDescPodName.Validators[0].(func(string) error)
	// podDescCreatedAt is the schema descriptor for created_at field.
	podDescCreatedAt := podFields[1].Descriptor()
	// pod.DefaultCreatedAt holds the default value on creation for the created_at field.
	pod.DefaultCreatedAt = podDescCreatedAt.Default.(func() time.Time)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescContent is the schema descriptor for content field.
	postDescContent := postFields[0].Descriptor()
	// post.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	post.ContentValidator = postDescContent.Validators[0].(func(string) error)
	// postDescCreatedAt is the schema descriptor for created_at field.
	postDescCreatedAt := postFields[1].Descriptor()
	// post.DefaultCreatedAt holds the default value on creation for the created_at field.
	post.DefaultCreatedAt = postDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAuthID is the schema descriptor for auth_id field.
	userDescAuthID := userFields[0].Descriptor()
	// user.AuthIDValidator is a validator for the "auth_id" field. It is called by the builders before save.
	user.AuthIDValidator = userDescAuthID.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
