// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pilegoblin/garbanzo/ent/bean"
	"github.com/pilegoblin/garbanzo/ent/post"
	"github.com/pilegoblin/garbanzo/ent/predicate"
)

// BeanUpdate is the builder for updating Bean entities.
type BeanUpdate struct {
	config
	hooks    []Hook
	mutation *BeanMutation
}

// Where appends a list predicates to the BeanUpdate builder.
func (bu *BeanUpdate) Where(ps ...predicate.Bean) *BeanUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BeanUpdate) SetName(s string) *BeanUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BeanUpdate) SetNillableName(s *string) *BeanUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bu *BeanUpdate) AddPostIDs(ids ...int) *BeanUpdate {
	bu.mutation.AddPostIDs(ids...)
	return bu
}

// AddPosts adds the "posts" edges to the Post entity.
func (bu *BeanUpdate) AddPosts(p ...*Post) *BeanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddPostIDs(ids...)
}

// Mutation returns the BeanMutation object of the builder.
func (bu *BeanUpdate) Mutation() *BeanMutation {
	return bu.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (bu *BeanUpdate) ClearPosts() *BeanUpdate {
	bu.mutation.ClearPosts()
	return bu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (bu *BeanUpdate) RemovePostIDs(ids ...int) *BeanUpdate {
	bu.mutation.RemovePostIDs(ids...)
	return bu
}

// RemovePosts removes "posts" edges to Post entities.
func (bu *BeanUpdate) RemovePosts(p ...*Post) *BeanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BeanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BeanUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BeanUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BeanUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BeanUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := bean.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Bean.name": %w`, err)}
		}
	}
	return nil
}

func (bu *BeanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bean.Table, bean.Columns, sqlgraph.NewFieldSpec(bean.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bean.FieldName, field.TypeString, value)
	}
	if bu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bean.PostsTable,
			Columns: []string{bean.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !bu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bean.PostsTable,
			Columns: []string{bean.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bean.PostsTable,
			Columns: []string{bean.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bean.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BeanUpdateOne is the builder for updating a single Bean entity.
type BeanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BeanMutation
}

// SetName sets the "name" field.
func (buo *BeanUpdateOne) SetName(s string) *BeanUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BeanUpdateOne) SetNillableName(s *string) *BeanUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (buo *BeanUpdateOne) AddPostIDs(ids ...int) *BeanUpdateOne {
	buo.mutation.AddPostIDs(ids...)
	return buo
}

// AddPosts adds the "posts" edges to the Post entity.
func (buo *BeanUpdateOne) AddPosts(p ...*Post) *BeanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddPostIDs(ids...)
}

// Mutation returns the BeanMutation object of the builder.
func (buo *BeanUpdateOne) Mutation() *BeanMutation {
	return buo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (buo *BeanUpdateOne) ClearPosts() *BeanUpdateOne {
	buo.mutation.ClearPosts()
	return buo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (buo *BeanUpdateOne) RemovePostIDs(ids ...int) *BeanUpdateOne {
	buo.mutation.RemovePostIDs(ids...)
	return buo
}

// RemovePosts removes "posts" edges to Post entities.
func (buo *BeanUpdateOne) RemovePosts(p ...*Post) *BeanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the BeanUpdate builder.
func (buo *BeanUpdateOne) Where(ps ...predicate.Bean) *BeanUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BeanUpdateOne) Select(field string, fields ...string) *BeanUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bean entity.
func (buo *BeanUpdateOne) Save(ctx context.Context) (*Bean, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BeanUpdateOne) SaveX(ctx context.Context) *Bean {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BeanUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BeanUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BeanUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := bean.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Bean.name": %w`, err)}
		}
	}
	return nil
}

func (buo *BeanUpdateOne) sqlSave(ctx context.Context) (_node *Bean, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bean.Table, bean.Columns, sqlgraph.NewFieldSpec(bean.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bean.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bean.FieldID)
		for _, f := range fields {
			if !bean.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bean.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bean.FieldName, field.TypeString, value)
	}
	if buo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bean.PostsTable,
			Columns: []string{bean.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !buo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bean.PostsTable,
			Columns: []string{bean.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bean.PostsTable,
			Columns: []string{bean.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bean{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bean.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
