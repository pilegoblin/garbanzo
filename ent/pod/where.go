// Code generated by ent, DO NOT EDIT.

package pod

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/pilegoblin/garbanzo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pod {
	return predicate.Pod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pod {
	return predicate.Pod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pod {
	return predicate.Pod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pod {
	return predicate.Pod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pod {
	return predicate.Pod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pod {
	return predicate.Pod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pod {
	return predicate.Pod(sql.FieldLTE(FieldID, id))
}

// PodName applies equality check predicate on the "pod_name" field. It's identical to PodNameEQ.
func PodName(v string) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldPodName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldCreatedAt, v))
}

// InviteCode applies equality check predicate on the "invite_code" field. It's identical to InviteCodeEQ.
func InviteCode(v string) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldInviteCode, v))
}

// PodNameEQ applies the EQ predicate on the "pod_name" field.
func PodNameEQ(v string) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldPodName, v))
}

// PodNameNEQ applies the NEQ predicate on the "pod_name" field.
func PodNameNEQ(v string) predicate.Pod {
	return predicate.Pod(sql.FieldNEQ(FieldPodName, v))
}

// PodNameIn applies the In predicate on the "pod_name" field.
func PodNameIn(vs ...string) predicate.Pod {
	return predicate.Pod(sql.FieldIn(FieldPodName, vs...))
}

// PodNameNotIn applies the NotIn predicate on the "pod_name" field.
func PodNameNotIn(vs ...string) predicate.Pod {
	return predicate.Pod(sql.FieldNotIn(FieldPodName, vs...))
}

// PodNameGT applies the GT predicate on the "pod_name" field.
func PodNameGT(v string) predicate.Pod {
	return predicate.Pod(sql.FieldGT(FieldPodName, v))
}

// PodNameGTE applies the GTE predicate on the "pod_name" field.
func PodNameGTE(v string) predicate.Pod {
	return predicate.Pod(sql.FieldGTE(FieldPodName, v))
}

// PodNameLT applies the LT predicate on the "pod_name" field.
func PodNameLT(v string) predicate.Pod {
	return predicate.Pod(sql.FieldLT(FieldPodName, v))
}

// PodNameLTE applies the LTE predicate on the "pod_name" field.
func PodNameLTE(v string) predicate.Pod {
	return predicate.Pod(sql.FieldLTE(FieldPodName, v))
}

// PodNameContains applies the Contains predicate on the "pod_name" field.
func PodNameContains(v string) predicate.Pod {
	return predicate.Pod(sql.FieldContains(FieldPodName, v))
}

// PodNameHasPrefix applies the HasPrefix predicate on the "pod_name" field.
func PodNameHasPrefix(v string) predicate.Pod {
	return predicate.Pod(sql.FieldHasPrefix(FieldPodName, v))
}

// PodNameHasSuffix applies the HasSuffix predicate on the "pod_name" field.
func PodNameHasSuffix(v string) predicate.Pod {
	return predicate.Pod(sql.FieldHasSuffix(FieldPodName, v))
}

// PodNameEqualFold applies the EqualFold predicate on the "pod_name" field.
func PodNameEqualFold(v string) predicate.Pod {
	return predicate.Pod(sql.FieldEqualFold(FieldPodName, v))
}

// PodNameContainsFold applies the ContainsFold predicate on the "pod_name" field.
func PodNameContainsFold(v string) predicate.Pod {
	return predicate.Pod(sql.FieldContainsFold(FieldPodName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pod {
	return predicate.Pod(sql.FieldLTE(FieldCreatedAt, v))
}

// InviteCodeEQ applies the EQ predicate on the "invite_code" field.
func InviteCodeEQ(v string) predicate.Pod {
	return predicate.Pod(sql.FieldEQ(FieldInviteCode, v))
}

// InviteCodeNEQ applies the NEQ predicate on the "invite_code" field.
func InviteCodeNEQ(v string) predicate.Pod {
	return predicate.Pod(sql.FieldNEQ(FieldInviteCode, v))
}

// InviteCodeIn applies the In predicate on the "invite_code" field.
func InviteCodeIn(vs ...string) predicate.Pod {
	return predicate.Pod(sql.FieldIn(FieldInviteCode, vs...))
}

// InviteCodeNotIn applies the NotIn predicate on the "invite_code" field.
func InviteCodeNotIn(vs ...string) predicate.Pod {
	return predicate.Pod(sql.FieldNotIn(FieldInviteCode, vs...))
}

// InviteCodeGT applies the GT predicate on the "invite_code" field.
func InviteCodeGT(v string) predicate.Pod {
	return predicate.Pod(sql.FieldGT(FieldInviteCode, v))
}

// InviteCodeGTE applies the GTE predicate on the "invite_code" field.
func InviteCodeGTE(v string) predicate.Pod {
	return predicate.Pod(sql.FieldGTE(FieldInviteCode, v))
}

// InviteCodeLT applies the LT predicate on the "invite_code" field.
func InviteCodeLT(v string) predicate.Pod {
	return predicate.Pod(sql.FieldLT(FieldInviteCode, v))
}

// InviteCodeLTE applies the LTE predicate on the "invite_code" field.
func InviteCodeLTE(v string) predicate.Pod {
	return predicate.Pod(sql.FieldLTE(FieldInviteCode, v))
}

// InviteCodeContains applies the Contains predicate on the "invite_code" field.
func InviteCodeContains(v string) predicate.Pod {
	return predicate.Pod(sql.FieldContains(FieldInviteCode, v))
}

// InviteCodeHasPrefix applies the HasPrefix predicate on the "invite_code" field.
func InviteCodeHasPrefix(v string) predicate.Pod {
	return predicate.Pod(sql.FieldHasPrefix(FieldInviteCode, v))
}

// InviteCodeHasSuffix applies the HasSuffix predicate on the "invite_code" field.
func InviteCodeHasSuffix(v string) predicate.Pod {
	return predicate.Pod(sql.FieldHasSuffix(FieldInviteCode, v))
}

// InviteCodeEqualFold applies the EqualFold predicate on the "invite_code" field.
func InviteCodeEqualFold(v string) predicate.Pod {
	return predicate.Pod(sql.FieldEqualFold(FieldInviteCode, v))
}

// InviteCodeContainsFold applies the ContainsFold predicate on the "invite_code" field.
func InviteCodeContainsFold(v string) predicate.Pod {
	return predicate.Pod(sql.FieldContainsFold(FieldInviteCode, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBeans applies the HasEdge predicate on the "beans" edge.
func HasBeans() predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BeansTable, BeansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBeansWith applies the HasEdge predicate on the "beans" edge with a given conditions (other predicates).
func HasBeansWith(preds ...predicate.Bean) predicate.Pod {
	return predicate.Pod(func(s *sql.Selector) {
		step := newBeansStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pod) predicate.Pod {
	return predicate.Pod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pod) predicate.Pod {
	return predicate.Pod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pod) predicate.Pod {
	return predicate.Pod(sql.NotPredicates(p))
}
